#include "tree.h"
#include <igl/segment_segment_intersect.h>
#include <igl/opengl/glfw/Viewer.h>

Eigen::MatrixXd load_canopy();

void visualize(const std::vector<Branch>& branches, const Eigen::MatrixXd& canopy) {
  Eigen::MatrixXd V(branches.size() * 4, 3);

  int row = 0;
  for (const auto& branch : branches) {
    V.row(row++) << branch.left_bottom.x(), branch.left_bottom.y(), branch.left_bottom.z();
    V.row(row++) << branch.left_top.x(), branch.left_top.y(), branch.left_top.z();
    V.row(row++) << branch.right_bottom.x(), branch.right_bottom.y(), branch.right_bottom.z();
    V.row(row++) << branch.right_top.x(), branch.right_top.y(), branch.right_top.z();
  }

  Eigen::MatrixXi F(branches.size() * 2, 3);
  for (int i = 0; i < branches.size(); ++i) {
    F.row(i * 2) << i * 4, i * 4 + 2, i * 4 + 1;
    F.row(i * 2 + 1) << i * 4 + 1, i * 4 + 2, i * 4 + 3;
  }

  igl::opengl::glfw::Viewer viewer;

  viewer.data().set_mesh(V, F);

  for (int i=0; i<96; i++) {
    if (i==95) {
      viewer.data().add_edges(canopy.row(95), canopy.row(0), Eigen::RowVector3d(0, 1, 0));
    } else {
      viewer.data().add_edges(canopy.row(i), canopy.row(i+1), Eigen::RowVector3d(0, 1, 0));
    }
  }

  viewer.data().line_width *= 2;
  viewer.launch();
}


int main()
{
  // Load the canopy
  Eigen::MatrixXd canopy_matrix = load_canopy();
  int numRows = canopy_matrix.rows();
  std::vector<Eigen::Vector3d> canopy;
  for (int i = 0; i < numRows; i++) {
    Eigen::Vector3d v(canopy_matrix(i, 0), canopy_matrix(i, 1), canopy_matrix(i, 2));
    canopy.push_back(v);
  }

  // Generate tree
  for (auto i=0; i<5; i++) {
    Tree tree(210.0, 30.0, canopy);
    tree.simulated_annealing();
    //tree.generate();
    std::cout<<tree.rate()<<std::endl;
    visualize(tree.branches, canopy_matrix);
  }
  return 0;
}

Eigen::MatrixXd load_canopy() {
  Eigen::MatrixXd C(96, 3);
  C << -128.863815, -7.170192, 0.000000,
  -157.200195, -5.064052, 0.000000,
  -184.187668, 1.039117, 0.000000,
  -209.690567, 10.816435, 0.000000,
  -233.573257, 23.945023, 0.000000,
  -255.700089, 40.102005, 0.000000,
  -275.935425, 58.964500, 0.000000,
  -294.143585, 80.209625, 0.000000,
  -310.188965, 103.514511, 0.000000,
  -323.935883, 128.556274, 0.000000,
  -335.248688, 155.012039, 0.000000,
  -343.991760, 182.558914, 0.000000,
  -350.029480, 210.874023, 0.000000,
  -355.758057, 250.052795, 0.000000,
  -360.996429, 294.860962, 0.000000,
  -365.316437, 344.002808, 0.000000,
  -368.289948, 396.182556, 0.000000,
  -369.488800, 450.104462, 0.000000,
  -368.484863, 504.472778, 0.000000,
  -364.849976, 557.991760, 0.000000,
  -358.156006, 609.365662, 0.000000,
  -347.974823, 657.298767, 0.000000,
  -333.878265, 700.495300, 0.000000,
  -315.438171, 737.659485, 0.000000,
  -292.226440, 767.495605, 0.000000,
  -276.443512, 781.757019, 0.000000,
  -259.033844, 794.690735, 0.000000,
  -240.246735, 806.179871, 0.000000,
  -220.331451, 816.107605, 0.000000,
  -199.537292, 824.357056, 0.000000,
  -178.113556, 830.811462, 0.000000,
  -156.309525, 835.353943, 0.000000,
  -134.374481, 837.867676, 0.000000,
  -112.557716, 838.235840, 0.000000,
  -91.108521, 836.341614, 0.000000,
  -70.276184, 832.068176, 0.000000,
  -50.310020, 825.298706, 0.000000,
  -19.611946, 808.688965, 0.000000,
  7.991901, 786.146545, 0.000000,
  32.582497, 758.498535, 0.000000,
  54.240818, 726.572083, 0.000000,
  73.047836, 691.194397, 0.000000,
  89.084534, 653.192566, 0.000000,
  102.431885, 613.393799, 0.000000,
  113.170860, 572.625183, 0.000000,
  121.382439, 531.713928, 0.000000,
  127.147598, 491.487183, 0.000000,
  130.547302, 452.772064, 0.000000,
  131.662537, 416.395813, 0.000000,
  131.852982, 388.598663, 0.000000,
  132.275208, 360.826630, 0.000000,
  132.705551, 333.109955, 0.000000,
  132.920364, 305.478882, 0.000000,
  132.695969, 277.963684, 0.000000,
  131.808716, 250.594559, 0.000000,
  130.034927, 223.401779, 0.000000,
  127.150955, 196.415588, 0.000000,
  122.933136, 169.666214, 0.000000,
  117.157806, 143.183914, 0.000000,
  109.601311, 116.998932, 0.000000,
  100.039993, 91.141548, 0.000000,
  95.591034, 80.484573, 0.000000,
  91.882729, 71.875305, 0.000000,
  88.714447, 64.966873, 0.000000,
  85.885567, 59.412403, 0.000000,
  83.195450, 54.865028, 0.000000,
  80.443466, 50.977882, 0.000000,
  77.428986, 47.404095, 0.000000,
  73.951378, 43.796799, 0.000000,
  69.810013, 39.809124, 0.000000,
  64.804253, 35.094204, 0.000000,
  58.733475, 29.305168, 0.000000,
  51.397045, 22.095154, 0.000000,
  49.146866, 20.028400, 0.000000,
  46.312458, 17.715542, 0.000000,
  43.000847, 15.220498, 0.000000,
  39.319054, 12.607191, 0.000000,
  35.374100, 9.939541, 0.000000,
  31.273014, 7.281470, 0.000000,
  27.122816, 4.696899, 0.000000,
  23.030529, 2.249750, 0.000000,
  19.103178, 0.003943, 0.000000,
  15.447786, -1.976599, 0.000000,
  12.171376, -3.627957, 0.000000,
  9.380974, -4.886215, 0.000000,
  0.349609, -7.567951, 0.000000,
  -11.183109, -9.413740, 0.000000,
  -24.602541, -10.538471, 0.000000,
  -39.294044, -11.057034, 0.000000,
  -54.642982, -11.084317, 0.000000,
  -70.034714, -10.735210, 0.000000,
  -84.854591, -10.124603, 0.000000,
  -98.487984, -9.367385, 0.000000,
  -110.320244, -8.578444, 0.000000,
  -119.736740, -7.872672, -0.000000,
  -126.122818, -7.364956, -0.000000;
  return C;
}